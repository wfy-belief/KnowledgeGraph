[{"source": "数据库知识", "target": "数据库", "rela": "subclassof", "type": "数据库知识", "value": 1, "belong": 1, "describe": "数据库(Database)是按照数据结构来组织、存储和管理数据的仓库。"}, {"source": "关系数据库", "target": "数据库", "rela": "subclassof", "type": "关系数据库", "value": 4, "belong": 2, "describe": "关系数据库，是创建在关系模型基础上的数据库，借助于集合代数等数学概念和方法来处理数据库中的数据。"}, {"source": "关系代数", "target": "关系数据库", "rela": "subclassof", "type": "关系代数", "value": 4, "belong": 2, "describe": "关系代数是一种抽象的查询语言,它用对关系的运算来表达查询。"}, {"source": "关系数据库概述", "target": "关系数据库", "rela": "subclassof", "type": "关系数据库概述", "value": 2, "belong": 2, "describe": "（1）关系数据库：在一个给定的应用领域中，所有实体及实体之间联系的集合构成一个关系数据库。\n（2）关系数据库的型与值：关系数据库的型称为关系数据库模式，是对关系数据库的描述，若干域的定义，在这些域上定义的若干关系模式；关系数据库的值是这些关系模式在某一时刻对应的关系的集合，通常简称为关系数据库。"}, {"source": "关系数据库管理系统", "target": "关系数据库", "rela": "subclassof", "type": "关系数据库管理系统", "value": 2, "belong": 2, "describe": "关系数据库管理系统（Relational Database Management System：RDBMS）是指包括相互联系的逻辑组织和存取这些数据的一套程序 (数据库管理系统软件)。关系数据库管理系统就是管理关系数据库，并将数据逻辑组织的系统。常用的关系数据库管理系统产品是Oracle、IBM的DB2和微软的SQL Server。"}, {"source": "关系的完整性", "target": "关系数据库", "rela": "subclassof", "type": "关系的完整性", "value": 2, "belong": 2, "describe": "关系完整性即指关系的正确性、相容性和有效性。它是给定的关系模型中数据及其联系的所有制约和依存规则，用以限定数据库状态及状态变化，从而保证数据的正确、相容和有效。\n关系模型的完整性有三类: 实体完整性、参照完整性和用户定义的完整性。其中，实体完整性和参照完整性是关系模型必须满足的完整性约束条件。"}, {"source": "关系数据结构", "target": "关系数据库", "rela": "subclassof", "type": "关系数据结构", "value": 2, "belong": 2, "describe": "在关系型数据结构中，数据是用二维表格的形式来组织的，但与简单表格中的结构有本质的区别。这里的数据具有更严密的定义，如数据类型一致、数据不可再分割、两行数据不能相同等。关系数据结构具有简单、灵活、存储效率高等特性，所以在结构化数据组织过程中得到了广泛的应用。"}, {"source": "关系演算", "target": "关系数据库", "rela": "subclassof", "type": "关系演算", "value": 2, "belong": 2, "describe": "关系演算是以数理逻辑中的谓词演算为基础的。以谓词演算为基础的查询语言称为关系演算语言。用谓词演算作为数据库查询语言的思想最早见于Kuhns的论文。把谓词演算用于关系数据库语(即关系演算的概念)是出E.F.Codd提出来的。"}, {"source": "关系数据库标准语言SQL", "target": "数据库", "rela": "subclassof", "type": "关系数据库标准语言SQL", "value": 3, "belong": 3, "describe": "SQL（Structured Query Language），即结构化查询语言。SQL集数据查询（Data Query）、数据操纵（Data Manipulation）、数据定义（Data Definition）和数据控制（Data Control）功能于一体。特点：综合统一；高度非过程化；面向集合的操作方式；以同一种语法结构提供两种使用方法(交互式，嵌入式)；语言简洁，易学易用。"}, {"source": "数据库基本表的操作", "target": "关系数据库标准语言SQL", "rela": "subclassof", "type": "数据库基本表的操作", "value": 4, "belong": 3, "describe": "数据库基本表的操作包括定义、修改、删除基本表等操作。"}, {"source": "索引操作", "target": "关系数据库标准语言SQL", "rela": "subclassof", "type": "索引操作", "value": 4, "belong": 3, "describe": "索引是对数据库表中一列或多列的值进行排序的一种结构，使用索引可快速访问数据库表中的特定信息。但是查询速度的提高是以插入，更新，删除的速度为代价的，所以索引的作用在于提高一个海量数据的检索速度。常见索引分为：主键索引(primary key)、唯一索引(unique)、普通索引(index)、全文索引(fulltext)。"}, {"source": "查询操作", "target": "关系数据库标准语言SQL", "rela": "subclassof", "type": "查询操作", "value": 4, "belong": 3, "describe": "数据库的作用主要是用于对数据进行存储、更新、删除、查询操作，即“增、删、改、查”，最重要的是查询。查询操作分为单表查询、连接查询、嵌套查询、集合查询。"}, {"source": "数据更新", "target": "关系数据库标准语言SQL", "rela": "subclassof", "type": "数据更新", "value": 4, "belong": 3, "describe": "数据更新（data revision）是以新数据项或记录、替换数据文件或数据库中与之相对应的旧数据项或记录的过程。通过删除一修改一再插入的操作来实现。"}, {"source": "视图操作", "target": "关系数据库标准语言SQL", "rela": "subclassof", "type": "视图操作", "value": 4, "belong": 3, "describe": "视图在本质上是一种虚拟表，其内容与真是表相似，包含一系列带有名称的列和行数据。视图的实际功能是封装了复杂的查询语句。视图并不在数据库中以存储数据值的形式存在。行和列数据来自定义视图的查询所引用的基本表，并且在具体引用视图时动态生成。"}, {"source": "数据控制", "target": "关系数据库标准语言SQL", "rela": "subclassof", "type": "数据控制", "value": 3, "belong": 3, "describe": "数据库管理系统通过以下三步来实现数据控制：授权定义、存权处理、查权操作。"}, {"source": "授权定义", "target": "数据控制", "rela": "subclassof", "type": "授权定义", "value": 3, "belong": 3, "describe": "具有授权资格的用户，如数据库管理员（Database Administrators，DBA）或建表户（Database Owner，DBO），通过数据控制语言（Data Control Language，DCL），将授权决定告知数据库管理系统。"}, {"source": "存权处理", "target": "数据控制", "rela": "subclassof", "type": "存权处理", "value": 3, "belong": 3, "describe": "数据库管理系统把授权的结果编译后存入数据字典中。数据字典是由系统自动生成、维护的一组表，记录着用户标识、基本表、视图和各表的列描述以及系统的授权情况。"}, {"source": "查权操作", "target": "数据控制", "rela": "subclassof", "type": "查权操作", "value": 3, "belong": 3, "describe": "当用户提出操作请求时，系统首先要在数据字典中查找用户的数据操作权限，当用户拥有该操作权时才能执行其操作，否则系统将拒绝其操作。"}, {"source": "嵌入式SQL", "target": "关系数据库标准语言SQL", "rela": "subclassof", "type": "嵌入式SQL", "value": 3, "belong": 3, "describe": "嵌入式SQL(英文 Embedded SQL)是一种将SQL语句直接写入C语言，COBOL，FORTRAN, Ada等编程语言的源代码中的方法。"}, {"source": "关系数据库设计理论", "target": "数据库", "rela": "subclassof", "type": "关系数据库设计理论", "value": 2, "belong": 4, "describe": "关系数据库设计理论主要包括三个方面的内容:函数依赖、范式(Normal Form)和模式设计。其中函数依赖起着核心作用,是模式分解和模式设计的基础,范式是模式分解的标."}, {"source": "关系模式的规范化", "target": "关系数据库设计理论", "rela": "subclassof", "type": "关系模式的规范化", "value": 2, "belong": 4, "describe": "关系模式的规范化实际上就是按照不同级别范式的要求条件对模式进行逐渐分解的过程。"}, {"source": "关系模式的分解", "target": "关系模式的规范化", "rela": "subclassof", "type": "关系模式的分解", "value": 2, "belong": 4, "describe": "把一个关系模式分解成若干个关系模式的过程，称为关系模式的分解。关系模式分解必须遵守两个准则(1)无损联接性：信息不失真（不增减信息）。(2)函数依赖保持性：不破坏属性间存在的依赖关系。"}, {"source": "关系模式规范化的步骤", "target": "关系模式的规范化", "rela": "subclassof", "type": "关系模式规范化的步骤", "value": 2, "belong": 4, "describe": "1,找出码;2,找出所有的非平凡依赖;3,找出违反范式的非平凡依赖;4,依据非平凡依赖就可以分解了。"}, {"source": "数据依赖", "target": "关系数据库设计理论", "rela": "subclassof", "type": "数据依赖", "value": 1, "belong": 4, "describe": "数据依赖是指一种状态，当程序结构导致数据引用之前处理过的数据时的状态。在编译学中，数据依赖是数据分析的一部分。"}, {"source": "关系模式中的数据依赖", "target": "数据依赖", "rela": "subclassof", "type": "关系模式中的数据依赖", "value": 1, "belong": 4, "describe": "数据依赖是通过一个关系中属性间值的相等与否体现出来的数据间的相互关系。它是现实世界属性间相互联系的抽象，是数据内在的性质，是语义的体现。现在人们已经提出了许多种类型的数据依赖，其是最重要的是函数依赖和多值依赖。"}, {"source": "数据依赖对关系模式的影响", "target": "数据依赖", "rela": "subclassof", "type": "数据依赖对关系模式的影响", "value": 1, "belong": 4, "describe": "规范化理论是用来改造关系模式的，通过分解关系模式来消除其中不合适的数据依赖，以解决插入异常、删除异常、更新异常和数据冗余问题。"}, {"source": "范式", "target": "关系数据库设计理论", "rela": "subclassof", "type": "范式", "value": 3, "belong": 4, "describe": "范式就是关系数据库中满足不同规范化程度的关系模式的类。"}, {"source": "数据库设计", "target": "数据库", "rela": "subclassof", "type": "数据库设计", "value": 2, "belong": 5, "describe": "数据库设计(Database Design)是指根据用户的需求，在某一具体的数据库管理系统上，设计数据库的结构和建立数据库的过程。数据库系统需要操作系统的支持。"}, {"source": "数据库实施", "target": "数据库设计", "rela": "subclassof", "type": "数据库实施", "value": 2, "belong": 5, "describe": "数据库的实施主要是根据逻辑结构设计和物理结构设计的结果,在计算机系统上建立实际的数据库结构、导入数据并进行程序的调试。"}, {"source": "数据库物理设计", "target": "数据库设计", "rela": "subclassof", "type": "数据库物理设计", "value": 2, "belong": 5, "describe": "数据库物理设计就是设计数据库的物理结构，根据数据库的逻辑结构来选定RDBMS（如Oracle、Sybase等），并设计和实施数据库的存储结构、存取方式等。"}, {"source": "数据库运行与维护", "target": "数据库设计", "rela": "subclassof", "type": "数据库运行与维护", "value": 2, "belong": 5, "describe": "数据库系统投入正式运行，意味着数据库的设计与开发阶段的基本结束，运行与维护阶段的开始。数据库的运行和维护是个长期的工作，是数据库设计工作的延续和提高。\n在数据库运行阶段，完成对数据库的日常维护，工作人员需要掌握DBMS的存储、控制和数据恢复等基本操作，而且要经常性地涉及物理数据库、甚至逻辑数据库的再设计，因此数据库的维护工作仍然需要具有丰富经验的专业技术人员(主要是数据库管理员)来完成。"}, {"source": "数据库设计的步骤", "target": "数据库设计", "rela": "subclassof", "type": "数据库设计的步骤", "value": 2, "belong": 5, "describe": "数据库设计通常分为6个阶段：（1）需求分析：分析用户的需求，包括数据、功能和性能需求；（2）概念结构设计：主要采用E-R模型进行设计，包括画E-R图；（3）逻辑结构设计：通过将E-R图转换成表，实现从E-R模型到关系模型的转换；（4）数据库物理设计：主要是为所设计的数据库选择合适的存储结构和存取路径；（5）数据库的实施：包括编程、测试和试运行；（6）数据库运行与维护：系统的运行与数据库的日常维护。"}, {"source": "概念结构设计", "target": "数据库设计", "rela": "subclassof", "type": "概念结构设计", "value": 2, "belong": 5, "describe": "概念结构设计的任务是在需求分析阶段产生的需求说明书的基础上，按照特定的方法把它们抽象为一个不依赖于任何具体机器的数据模型，即概念模型。概念模型使设计者的注意力能够从复杂的实现细节中解脱出来，而只集中在最重要的信息的组织结构和处理模式上。"}, {"source": "逻辑结构设计", "target": "数据库设计", "rela": "subclassof", "type": "逻辑结构设计", "value": 2, "belong": 5, "describe": "逻辑结构设计是将概念结构设计阶段完成的概念模型，转换成能被选定的数据库管理系统(DBMS)支持的数据模型。这里主要将E-R模型转换为关系模型。需要具体说明把原始数据进行分解、合并后重新组织起来的数据库全局逻辑结构，包括所确定的关键字和属性、重新确定的记录结构和文件结构、所建立的各个文件之间的相互关系，形成本数据库的数据库管理员视图。"}, {"source": "需求分析", "target": "数据库设计", "rela": "subclassof", "type": "需求分析", "value": 2, "belong": 5, "describe": "数据需求分析是从对数据进行组织与存储的角度,从用户视图出发,分析与辨别应用领域所管理的各类数据项(Data Items)和数据结构,形成数据字典的主要内容。"}, {"source": "数据抽象", "target": "概念结构设计", "rela": "subclassof", "type": "数据抽象", "value": 2, "belong": 5, "describe": "数据抽象结构是对现实世界的一种抽象从实际的人、物、事和概念中抽取所关心的共同特性，忽略非本质的细节把这些特性用各种概念精确地加以描述这些概念组成了某种模型。包括分类、聚集和概括三种常用抽象。"}, {"source": "概念结构设计的方法与步骤", "target": "概念结构设计", "rela": "subclassof", "type": "概念结构设计的方法与步骤", "value": 4, "belong": 5, "describe": "概念结构设计主要有四种策略：自顶向下，自底向上，由里向外（逐步扩张）和混合策略。方法是先画出组织的局部E-R图，然后将其合并，在此基础进行优化和美化。"}, {"source": "视图的集成", "target": "概念结构设计", "rela": "subclassof", "type": "视图的集成", "value": 4, "belong": 5, "describe": "把基于不同用户视角的局部ER图集成为一个统一的、没有冗余的全局ER图。局部ER图（概念数据模型）的集成一般有如下四个步骤：（1）集成策略选择（2）比较实体关系图（3）统一实体关系元素（4）合并、重构实体关系图"}, {"source": "E-R图向数据模型的转换", "target": "逻辑结构设计", "rela": "subclassof", "type": "E-R图向数据模型的转换", "value": 4, "belong": 5, "describe": "一般的转换原则为：一个实体型转换为一个关系模式，关系的属性就是实体的属性，关系的码就是实体的码。"}, {"source": "数据模型的优化", "target": "逻辑结构设计", "rela": "subclassof", "type": "数据模型的优化", "value": 4, "belong": 5, "describe": "通常以规范化理论为指导，优化方法为确定数据依赖，对各个关系模式之间的数据依赖进行极小化处理。"}, {"source": "设计用户子模式", "target": "逻辑结构设计", "rela": "subclassof", "type": "设计用户子模式", "value": 4, "belong": 5, "describe": "根据局部应用需求设计用户子模式。目的是保证系统安全性，简化用户对系统的使用，DBMS中一般采用视图机制。"}, {"source": "数据字典", "target": "需求分析", "rela": "subclassof", "type": "数据字典", "value": 4, "belong": 5, "describe": "数据字典是进行详细的数据收集和数据分析所获得的主要成果。它是关于数据库中数据的描述，即元数据，而不是数据本身。\n数据字典是在需求分析阶段建立，在数据库设计过程中不断修改、充实、完善的。它通常包括数据项、数据结构、数据流、数据存储和处理过程几部分。"}, {"source": "需求分析的任务", "target": "需求分析", "rela": "subclassof", "type": "需求分析的任务", "value": 1, "belong": 5, "describe": "需求分析的任务是通过详细调查现实世界要处理的对象（组织、部门、企业等），充分了解原系统（手工系统或计算机系统）的工作概况，明确用户的各种需求，然后在此基础上确定新系统的功能。新系统必须充分考虑今后可能的扩充和改变，不能仅仅按当前应用需求来设计数据库。"}, {"source": "需求分析的方法", "target": "需求分析", "rela": "subclassof", "type": "需求分析的方法", "value": 1, "belong": 5, "describe": "从系统分析出发，可将需求分析方法大致分为功能分解方法、结构化分析方法、信息建模法和面向对象的分析方法。常用结构化分析（SA）方法：从最上层系统组织机构入手，采用自顶向下、逐层分解的方式分析系统。"}, {"source": "专门的关系运算", "target": "关系代数", "rela": "type", "type": "专门的关系运算", "value": 4, "belong": 2, "describe": "专门的运算关系包括选择、投影、连接、除运算四种。"}, {"source": "选择", "target": "专门的关系运算", "rela": "type", "type": "选择", "value": 4, "belong": 2, "describe": "定义：在关系R中选出满足指定条件F的元组(行操作)。\n表达式：σF(R) = {t|t∈R∧F(t)='真'}"}, {"source": "投影", "target": "专门的关系运算", "rela": "type", "type": "投影", "value": 4, "belong": 2, "describe": "定义：从关系R中选出若干属性A组成新关系(列操作)。\n表达式：πA(R) = {t[A]|t∈R}"}, {"source": "连接", "target": "专门的关系运算", "rela": "type", "type": "连接", "value": 4, "belong": 2, "describe": "定义：从两个关系R和S的笛卡尔积中选取属性间满足指定条件AθB的元组。\n表达式：R∞S(AθB) = {t(r)t(s)|t(r)∈R∧t(s)∈S∧t(r)[A]θt(s)[B]}\n拓展关系：\n    连接分两种：等值连接与自然连接\n    ①等值连接：指定条件AθB的θ为'='时\n    ②自然连接：在等值连接的基础上去除重复的属性\n"}, {"source": "除运算", "target": "专门的关系运算", "rela": "type", "type": "除运算", "value": 4, "belong": 2, "describe": "定义：设关系R除以关系S的结果为关系T,则T包含所有在R但不在S中的属性及值,且T的元组与S的元组的所有组合都在R中。\n表达式：R÷S = {t(r)[X]|t(r)∈R∧π(Y)(S)属于Y(x)},其中Y(x)为x在R中的象集,x=t(r)[X]"}, {"source": "传统的集合运算", "target": "关系代数", "rela": "type", "type": "传统的集合运算", "value": 4, "belong": 2, "describe": "传统的集合运算是二目运算，它包括并、差、交、笛卡尔积4种运算。"}, {"source": "并", "target": "传统的集合运算", "rela": "type", "type": "并", "value": 4, "belong": 2, "describe": "设关系R和S具有相同的目n(即两个关系都有n个属性)，其相应的属性取自同一个域，则：关系R与关系S的并记为：R∪S={t|t∈R?t∈S}，其结果仍为n目关系，由属性R或属性S的元组组成。"}, {"source": "差", "target": "传统的集合运算", "rela": "type", "type": "差", "value": 4, "belong": 2, "describe": "设关系R和S具有相同的目n(即两个关系都有n个属性)，其相应的属性取自同一个域，则：关系R与关系S的差记为：R-S={t|t∈R?t?S}，其结果关系仍为n目关系，由属于R而不属于S的所有元组组成。"}, {"source": "交", "target": "传统的集合运算", "rela": "type", "type": "交", "value": 4, "belong": 2, "describe": "设关系R和S具有相同的目n(即两个关系都有n个属性)，其相应的属性取自同一个域，则：关系R与关系S的交记为：R∩S={t∈R?t∈S}其结果关系仍为n目关系，由既属于R又属于S的元组组成。关系的交运算可以用差运算来表示，即R∩S= R-(R-S)。"}, {"source": "笛卡尔积", "target": "传统的集合运算", "rela": "type", "type": "笛卡尔积", "value": 4, "belong": 2, "describe": "设关系R和S具有相同的目n(即两个关系都有n个属性)，其相应的属性取自同一个域。这里的笛卡尔积严格地讲是广义笛卡尔积(Extended Cartesian Product)。在不会出现混淆的情况下广义笛卡尔积也称为笛卡尔积。两个分别为n目和m目的关系R和S的笛卡尔积是一个n+m列的元组的集合。元组的前n列是关系R的一个元组，后m列是关系S的一个元组。若R有k1个元组，S有K2个元组，则关系R和关系S的迪卡尔积有K1  K2个元组。记作：R×S={(t_r t_s ) ?|t_r∈R?t_s∈S}。"}, {"source": "元组关系演算语言", "target": "关系演算", "rela": "type", "type": "元组关系演算语言", "value": 2, "belong": 2, "describe": "元组关系演算以元组变量作为谓词变元的基本对象。典型的元组关系演算语言是E.F.Codd提出的ALPHA语言，但这一语言并没有实际实现。现在关系库管理系统INGRES所用的QUEL语言是参会照ALPHA语言研制的，与ALPHA十分相似。\nALPHA语言语句的基本格式是:操作语句 工作空间名(表达式):操作条件"}, {"source": "域关系演算语言", "target": "关系演算", "rela": "type", "type": "域关系演算语言", "value": 2, "belong": 2, "describe": "域关系演算是另一种形式的关系演算。域关系演算以元组变量的分量(即域变量)作为谓词变元的基本对象。QBE是一个很特色的域关系演算语言，穹由M.MZloof于1975年提出，关于1978年在IBM370上得以实现。QBE是Query By Example(即通过例子进行查询)的简称，它是一种关系语言，同时也指使用此语言的关系数据库时系统。"}, {"source": "定义基本表", "target": "数据库基本表的操作", "rela": "type", "type": "定义基本表", "value": 4, "belong": 3, "describe": "SQL语言用CREATE TABLE语句定义基本表。"}, {"source": "修改基本表", "target": "数据库基本表的操作", "rela": "type", "type": "修改基本表", "value": 4, "belong": 3, "describe": "SQL语言用ALTER TABLE语句修改基本表"}, {"source": "删除基本表", "target": "数据库基本表的操作", "rela": "type", "type": "删除基本表", "value": 4, "belong": 3, "describe": "当某个基本表不再需要时，可以使用SQL语句DROP TABLE进行删除。"}, {"source": "查询索引", "target": "索引操作", "rela": "type", "type": "查询索引", "value": 4, "belong": 3, "describe": "使用SHOW INDEX 命令来列出表中的相关的索引信息。实例：show index 索引名 from 表名"}, {"source": "创建索引", "target": "索引操作", "rela": "type", "type": "创建索引", "value": 4, "belong": 3, "describe": "索引被创建于已有的表中，它可使对行的定位更快速更有效。使用CREATE 语句创建索引。实例：CREATE INDEX新建的索引名 ON 表名(表中的列)"}, {"source": "删除索引", "target": "索引操作", "rela": "type", "type": "删除索引", "value": 4, "belong": 3, "describe": "当某个索引不再需要时，可以使用SQL语句DROP INDEX进行删除。实例：Drop index 索引名 on 表名"}, {"source": "单表查询", "target": "查询操作", "rela": "type", "type": "单表查询", "value": 4, "belong": 3, "describe": "查询仅涉及一个表，是一种最简单的查询操作。（1）选择表中的若干列（2）选择表中的若干元组（3）对查询结果排序（4）使用集函数（5）对查询结果分组"}, {"source": "连接查询", "target": "查询操作", "rela": "type", "type": "连接查询", "value": 4, "belong": 3, "describe": "内连接的连接查询结果集中仅包含满足条件的行，内连接是SQL Server缺省的连接方式，可以把INNERJOIN简写成JOIN，根据所使用的比较方式不同，内连接又分为等值连接、自然连接和不等连接三种；交叉连接的连接查询结果集中包含两个表中所有行的组合；外连接的连接查询结果集中既包含那些满足条件的行，还包含其中某个表的全部行，有3种形式的外连接：左外连接、右外连接、全外连接。"}, {"source": "嵌套查询", "target": "查询操作", "rela": "type", "type": "嵌套查询", "value": 4, "belong": 3, "describe": "嵌套查询指包含一个或多个子查询或者子查询的另一个术语的SELECT语句。其中外层查询称为主查询，内层查询称为子查询。"}, {"source": "集合查询", "target": "查询操作", "rela": "type", "type": "集合查询", "value": 4, "belong": 3, "describe": "在数学中可以对集合做交并差运算，在 SQL 中同样可以对查询结果集做交并差操作。这三种 SQL 集合查询对应的操作符关键字分别是 INTERSECT、UNION/UNION ALL、MINUS。"}, {"source": "插入数据", "target": "数据更新", "rela": "type", "type": "插入数据", "value": 4, "belong": 3, "describe": "SQL数据插入一般有两种格式，一种是单行数据插入，一种是子查询结果插入。关键词是INSERT。"}, {"source": "修改数据", "target": "数据更新", "rela": "type", "type": "修改数据", "value": 4, "belong": 3, "describe": "数据修改的关键词是UPDATE，一般格式为：\nUPDATE 表名\nSET 更新内容\nWHERE 更新条件\n其中，SET子句中的更新内容是以“属性名=表达式”的形式出现的。"}, {"source": "删除数据", "target": "数据更新", "rela": "type", "type": "删除数据", "value": 4, "belong": 3, "describe": "数据删除的关键词是DELETE，一般格式为：\nDELETE\nFROM表名\nWHERE 删除条件\n其中，DELETE子句删除表中的数据，并不影响表的结构。"}, {"source": "定义视图", "target": "视图操作", "rela": "type", "type": "定义视图", "value": 4, "belong": 3, "describe": "语法形式：create view view_name as 查询语句;\n先创建t_product表，然后插入4条数据记录，最后制作视图。"}, {"source": "查询视图", "target": "视图操作", "rela": "type", "type": "查询视图", "value": 4, "belong": 3, "describe": "语法形式：\nshow create view view_name \\G;\ndesc view_name;\nselect * from view_name;"}, {"source": "更新视图", "target": "视图操作", "rela": "type", "type": "更新视图", "value": 4, "belong": 3, "describe": "语法形式：\ncreate or replace view view_name as 查询语句;"}, {"source": "BC范式", "target": "范式", "rela": "type", "type": "BC范式", "value": 3, "belong": 4, "describe": "在关系模式中每一个决定因素都包含候选键，也就是说，只要属性或属性组A能够决定任何一个属性B，则A的子集中必须有候选键。"}, {"source": "第一范式", "target": "范式", "rela": "type", "type": "第一范式", "value": 3, "belong": 4, "describe": "第一范式是规范化约束范式。"}, {"source": "第三范式", "target": "范式", "rela": "type", "type": "第三范式", "value": 3, "belong": 4, "describe": "第三范式(Third Normal Form,3rd NF)就是指表中的所有数据元素不但要能唯一地被主关键字所标识,而且它们之间还必须相互独立,不存在其他的函数关系。也就是说，对于一个满足2nd NF 的数据结构来说，表中有可能存在某些数据元素依赖于其他非关键字数据元素的现象,必须消除。"}, {"source": "第二范式", "target": "范式", "rela": "type", "type": "第二范式", "value": 3, "belong": 4, "describe": "第二范式(Second Normal Form,2nd NF)是指每个表必须有主关键字(Primary key),其他数据元素与主关键字一一对应。若关系模式R∈1NF（即R符合第一范式），并且每一个非主属性都完全依赖于R的主码，则R∈2NF（即R符合第二范式）。"}]